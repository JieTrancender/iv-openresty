#!/usr/bin/env lua

local function trim(s)
    return (s:gsub("^%s*(.-)%s*$", "%1"))
end

local function excute_cmd(cmd)
    local t = io.popen(cmd)
    local data = t:read("*all")
    t:close()
    return data
end

local pwd = trim(excute_cmd("pwd"))
if not pwd then
    error("failed to fetch curretn path")
end

local iv_home = pwd
-- package.cpath = pwd .. package.cpath
package.path = pwd .. "/lua/?.lua;"
                .. pwd .. "/lualib/?.lua;"
                .. package.path


local yaml = require("tinyyaml")
local template = require("resty.template")

local ngx_tpl = [=[
master_process on;

worker_processes auto;
{% if os_name == "Linux" then %}
worker_cpu_affinity auto;
{% end %}

error_log logs/error.log info;
pid logs/nginx.pid;

worker_rlimit_nofile 20480;

events {
    accept_mutex off;
    worker_connections 10620;
}

worker_shutdown_timeout 3;

http {
    lua_package_path "]=] .. [=[{*lua_path*};;";
    lua_package_cpath "]=] .. [=[{*iv_lua_home*}/luaclib/?.so;;]=]
                      .. [=[{*lua_cpath*};";

    log_format main '$remote_addr - $remote_user [$time_local] $http_host "$request" $status $body_bytes_sent $request_time "$http_referer" "$http_user_agent" $upstream_addr $upstream_status $upstream_response_time';

    access_log logs/access.log main buffer=32768 flush=1;
    open_file_cache max=1000 inactive=60;

    more_set_headers 'Server: IV web server';

    include mime.types;

    real_ip_header {* real_ip_header *};
    {% for _, real_ip in ipairs(real_ip_from) do %}
    set_real_ip_from {{real_ip}};
    {% end %}

    resolver 114.114.114.114;

    init_by_lua_block {
        require "resty.core"
        iv = require("iv")
        -- iv.http_init()
    }

    init_worker_by_lua_block {
        iv.http_init_worker()
    }

    server {
        listen {* node_listen *};
        #listen {* node_ssl_listen *} ssl;
        {% if enable_ipv6 then %}
        listen [::]:{* node_listen *};
        listen [::]:{* node_ssl_listen *} ssl;
        {% end %}
        # ssl_certificate cert/iv.crt;
        # ssl_certificate_key cert/iv.key;
        #ssl_session_cache shared:SSL:1m;

        charset utf-8;

        {% if with_module_status then %}
        location = /iv/nginx_status {
            allow 127.0.0.0/24;
            deny all;
            access_log off;
            stub_status;
        }
        {% end %}

        location /iv/welcome {
            content_by_lua_block {
                iv.welcome()
            }
        }

        location /test {
            content_by_lua_block {
                iv.test()
            }
        }

        location /site {
            proxy_pass http://127.0.0.1:8081/;
        }

        location / {
            content_by_lua_block {
                iv.http_content()
            }
        }
    }

    server {
        listen 8081;
        index index.php;
        root typecho;

        location / {
            #if (!-e $request_filename) {
            #    rewrite  ^/(.*)$  /index.php/$1  last;
            #    break;
            #}

            try_files $uri $uri/ /index.php;
        }

        #此配置使nginx支持php
        location ~ .*\.php(\/.*)*$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass 127.0.0.1:9000;#php-fpm的默认端口是9000
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            #include fastcgi_params;
        include fastcgi.conf;
        }

        location ~ .*\.(js|css)$ {
        }

        #location ~ .*\.php(\/.*)*$ {
        #    include fastcgi_params;
        #    fastcgi_pass  127.0.0.1:9000;
        #}
    }
}
]=]

local function write_file(file_path, data)
    local file=  io.open(file_path, "w+")    
    if not file then
        return false, "failed to open file: " .. file_path
    end

    file:write(data)
    file:close()
    return true
end

local function read_file(file_path)
    local file = io.open(file_path, "rb")
    if not file then
        return false, "failed to open file: " .. file_path
    end

    local data = file:read("*all")
    file:close()
    return data
end

local function exec(command)
    local t = io.popen(command)
    local res = t:read("*all")
    t:close()
    return trim(res)
end

local function read_yaml_conf()
    local yaml_conf, err = read_file(iv_home .. "/conf/config.yaml")
    if not yaml_conf then
        return nil, err
    end

    return yaml.parse(yaml_conf)
end

local function get_openresty_version()
    local str = "nginx version: openresty/"
    local ret = excute_cmd("openresty -v 2>&1")
    local pos = string.find(ret, str)
    if pos ~= 1 then
        return nil
    end

    return string.sub(ret, string.len(str) + 1)
end

local function split(self, sep)
    local sep, fields = sep or ":", {}
    local pattern = string.format("([^%s]+)", sep)
    self:gsub(pattern, function(c) fields[#fields + 1] = c end)
    return fields
end

local function check_or_version(cur_ver_s, need_ver_s)
    local cur_vers = split(cur_ver_s, [[.]])
    local need_vers = split(need_ver_s, [[.]])
    local len = math.max(#cur_vers, #need_vers)

    for i = 1, len do
        local cur_ver = tonumber(cur_vers[i]) or 0
        local need_ver = tonumber(need_vers[i]) or 0
        if cur_ver > need_ver then
            return true
        end

        if cur_ver < need_ver then
            return false
        end
    end

    return true
end

local _M = {
    version = 0.1
}

function _M.help()
    print([[
Usage: iv [action] <argument>

help:          show this message, then exit
init:          initialize the local nginx.conf
start:         start the iv server
run:           start the iv server
stop:          stop the iv server
clean:         remove generated files
reload:        reload the iv server
version:       print the version of iv
test:          run the test case
]])
end

local function init()
    local yaml_conf, err = read_yaml_conf()
    if not yaml_conf then
        error("failed to read local yaml config of iv: " .. err)
    end

    local or_ver = excute_cmd("openresty -V 2>&1")
    local with_module_status = true
    if or_ver and not
    or_ver:find("http_stub_status_module", 1, true) then
        io.stderr:write("'http_stub_status_module' module is missing in ",
                        " your openresty, please check it out. Without this",
                        " module, there will by fewer monitoring indicators.\n")
    end

    local sys_conf = {
        lua_path = package.path,
        lua_cpath = package.cpath,
        os_name = exec("uname"),
        iv_lua_home = iv_home,
        with_module_status = with_module_status,
        node_ssl_listen = 9443,  -- default value
    }

    for k, v in pairs(yaml_conf.iv) do
        sys_conf[k] = v
    end

    local conf_render = template.compile(ngx_tpl)
    local ngxconf = conf_render(sys_conf)

    local ok, err = write_file(iv_home .. "/conf/nginx.conf", ngxconf)
    if not ok then
        error("failed to update nginx.conf: " .. err)
    end

    local op_ver = get_openresty_version()
    if op_ver == nil then
        io.stderr:write("can not find openresty\n")
        return
    end

    local need_ver = "1.15.8"
    if not check_or_version(op_ver, need_ver) then
        io.stderr:write("openresty version must >= ", need_ver, "\n")
        return
    end
end
_M.init = init

local openresty_args = [[openresty -p ]] .. iv_home .. [[ -c ]]
                       .. iv_home .. [[/conf/nginx.conf]]

function _M.start(...)
    init(...)

    local cmd = openresty_args
    os.execute(cmd)
end

function _M.stop()
    local cmd = openresty_args .. [[ -s stop]]
    os.execute(cmd)
end

function _M.reload()
    local test_cmd = openresty_args .. [[ -t -q ]]
    if os.execute((test_cmd)) ~= 0 then
        return
    end

    local cmd = openresty_args .. [[ -s reload]]
    os.execute(cmd)
end

function _M.version()
    local ver = require("apisix.core.version")
    print("core: ", ver['VERSON'])
end

local cmd_action = arg[1]
if not cmd_action then
    return _M.help()
end

if not _M[cmd_action] then
    print("invalid argument: ", cmd_action, "\n")
    return
end

_M[cmd_action](arg[2])
